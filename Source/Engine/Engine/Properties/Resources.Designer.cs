//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Spark.Engine.Properties {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Spark.Engine.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   重写当前线程的 CurrentUICulture 属性，对
        ///   使用此强类型资源类的所有资源查找执行重写。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) out vec3 BufferDepth;
        ///
        ///void main()
        ///{
        ///    BufferDepth = vec3(gl_FragCoord.z, 0, 0);
        ///}
        ///
        /// 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_BackFaceDepth_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/BackFaceDepth.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec3 Normal;
        ///layout (location = 2) in vec3 Tangent;
        ///layout (location = 3) in vec3 BitTangent;
        ///layout (location = 4) in vec3 Color;
        ///layout (location = 5) in vec2 TexCoord;
        ///
        ///uniform mat4 ModelTransform;
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///
        ///
        ///void main()
        ///{
        ///    gl_Position = ProjectionTransform * ViewTransform * ModelTransform * vec4(Location, 1.0);
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_BackFaceDepth_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/BackFaceDepth.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) out vec4 GBuffer1;
        ///#ifndef _MICRO_GBUFFER_
        ///layout (location = 1) out vec4 GBuffer2;
        ///#endif
        ///
        ///
        ///in vec2 OutTexCoord;
        ///in vec3 OutColor;
        ///in mat3 TBNMat;
        ///in vec3 TbnCameraLocation;
        ///in vec3 OutNormal;
        ///in vec3 OutPosition;
        ///in vec3 TbnPosition;
        ///
        ///uniform sampler2D BaseColorTexture;
        ///uniform sampler2D NormalTexture;
        ///uniform sampler2D CustomTexture; // Metallic Roughness AO Parallax
        ///
        ///vec2 Normal3Dto2D(vec3 Normal);
        ///
        ///vec2 GetUVOffset(vec [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Base_Base_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Base/Base.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec3 Normal;
        ///layout (location = 2) in vec3 Tangent;
        ///layout (location = 3) in vec3 BitTangent;
        ///layout (location = 4) in vec3 Color;
        ///layout (location = 5) in vec2 TexCoord;
        ///
        ///uniform mat4 ModelTransform;
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///uniform mat4 NormalTransform;
        ///uniform vec3 CameraLocation;
        ///
        ///out vec2 OutTexCoord;
        ///out vec3 OutColor;
        ///out vec3 OutNormal;
        ///out  [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Base_Base_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Base/Base.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) out vec4 GBuffer1;
        ///#ifndef _MICRO_GBUFFER_
        ///layout (location = 1) out vec4 GBuffer2;
        ///#endif
        ///
        ///
        ///in vec2 OutTexCoord;
        ///in vec3 OutColor;
        ///in mat3 TBNMat;
        ///in vec3 TbnCameraLocation;
        ///in vec3 OutNormal;
        ///in vec3 OutPosition;
        ///in vec3 TbnPosition;
        ///
        ///uniform sampler2D BaseColorTexture;
        ///uniform sampler2D NormalTexture;
        ///uniform sampler2D CustomTexture; // Metallic Roughness AO Parallax
        ///
        ///vec2 Normal3Dto2D(vec3 Normal);
        ///
        ///vec2 GetUVOffset(vec [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Base_BaseInstance_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Base/BaseInstance.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec3 Normal;
        ///layout (location = 2) in vec3 Tangent;
        ///layout (location = 3) in vec3 BitTangent;
        ///layout (location = 4) in vec3 Color;
        ///layout (location = 5) in vec2 TexCoord;
        ///layout (location = 6) in mat4 ModelTransform;
        ///layout (location = 10) in mat4 NormalTransform;
        ///
        ///// uniform mat4 ModelTransform;
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///// uniform mat4 NormalTransform; [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Base_BaseInstance_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Base/BaseInstance.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) out vec4 GBuffer1;
        ///#ifndef _MICRO_GBUFFER_
        ///layout (location = 1) out vec4 GBuffer2;
        ///#endif
        ///
        ///
        ///in vec2 OutTexCoord;
        ///in vec3 OutColor;
        ///in mat3 TBNMat;
        ///in vec3 TbnCameraLocation;
        ///in vec3 OutNormal;
        ///in vec3 OutPosition;
        ///in vec3 TbnPosition;
        ///
        ///uniform sampler2D BaseColorTexture;
        ///uniform sampler2D NormalTexture;
        ///uniform sampler2D CustomTexture; // Metallic Roughness AO Parallax
        ///
        ///vec2 Normal3Dto2D(vec3 Normal);
        ///
        ///vec2 GetUVOffset(vec [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Base_BaseSkeletalMesh_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Base/BaseSkeletalMesh.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec3 Normal;
        ///layout (location = 2) in vec3 Tangent;
        ///layout (location = 3) in vec3 BitTangent;
        ///layout (location = 4) in vec3 Color;
        ///layout (location = 5) in vec2 TexCoord;
        ///layout (location = 6) in vec4 BoneIds;
        ///layout (location = 7) in vec4 BoneWeights;
        ///
        ///uniform mat4 ModelTransform;
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///uniform mat4 NormalTransform;
        ///uniform vec3 Cam [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Base_BaseSkeletalMesh_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Base/BaseSkeletalMesh.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///out vec3 glColor;
        ///
        ///in vec2 OutTexCoord;
        ///uniform sampler2D ColorTexture;
        ///
        ///uniform bool horizontal;
        ///void main()
        ///{             
        ///    float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);
        ///    vec2 tex_offset = 3.0f / vec2(textureSize(ColorTexture, 0)); // gets size of single texel
        ///    vec3 result = texture(ColorTexture, OutTexCoord).rgb * weight[0]; // current fragment&apos;s contribution
        ///    if(horizontal)
        ///    {
        ///        for(int i = 1;  [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Bloom_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Bloom.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec2 TexCoord;
        ///
        ///uniform vec2 TexCoordScale;
        ///out vec2 OutTexCoord;
        ///
        ///void main()
        ///{
        ///    
        ///    OutTexCoord = TexCoord * TexCoordScale;
        ///    gl_Position = vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Bloom_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Bloom.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) out vec3 glColor;
        ///
        ///in vec2 OutTexCoord;
        ///uniform sampler2D ColorTexture;
        ///
        ///void main()
        ///{ 
        ///    vec3 FragColor = texture(ColorTexture, OutTexCoord).rgb;
        ///    float brightness = dot(FragColor.rgb, vec3(0.2126, 0.7152, 0.0722));
        ///    if(brightness &gt;= 1.0)
        ///        glColor = FragColor;
        ///    else 
        ///        glColor = vec3(0, 0, 0);
        ///}
        /// 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_BloomPre_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/BloomPre.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec2 TexCoord;
        ///
        ///uniform vec2 TexCoordScale;
        ///out vec2 OutTexCoord;
        ///
        ///void main()
        ///{
        ///    
        ///    OutTexCoord = TexCoord * TexCoordScale;
        ///    gl_Position = vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_BloomPre_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/BloomPre.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///out vec4 glColor;
        ///
        ///in vec2 OutTexCoord;
        ///uniform sampler2D ColorTexture;
        ///uniform float Brightness;
        ///
        ///void main()
        ///{
        ///    glColor = vec4(texture(ColorTexture, OutTexCoord).rgb * Brightness, 1.0f);
        ///}
        /// 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_BrightnessLighting_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/BrightnessLighting.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec2 TexCoord;
        ///
        ///uniform vec2 TexCoordScale;
        ///out vec2 OutTexCoord;
        ///
        ///void main()
        ///{
        ///    
        ///    OutTexCoord = TexCoord * TexCoordScale;
        ///    gl_Position = vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_BrightnessLighting_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/BrightnessLighting.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///
        ///out vec4 Color;
        ///
        ///uniform sampler2D BaseColorTexture;
        ///uniform sampler2D NormalTexture;
        ///uniform sampler2D CustomTexture;
        ///
        ///
        ///uniform sampler2D DepthTexture;
        ///uniform sampler2D GBuffer1;
        ///#ifndef _MICRO_GBUFFER_
        ///uniform sampler2D GBuffer2;
        ///#endif
        ///uniform mat4 VPInvert;
        ///
        ///in vec2 OutTexCoord;
        ///in vec2 OutTrueTexCoord;
        ///in mat4 ModelInvertTransform;
        ///
        ///vec3 GetWorldLocation(vec3 ScreenLocation);
        ///vec4 MicroGBufferEncoding(vec3 BaseColor, vec2 Normal, float r, [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Decal_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Decal.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec2 TexCoord;
        ///
        ///uniform vec2 TexCoordScale;
        ///uniform mat4 ModelTransform;
        ///out vec2 OutTexCoord;
        ///out vec2 OutTrueTexCoord;
        ///out mat4 ModelInvertTransform;
        ///
        ///void main()
        ///{
        ///    ModelInvertTransform = inverse(ModelTransform);
        ///    OutTexCoord = TexCoord * TexCoordScale;
        ///    OutTrueTexCoord = TexCoord;
        ///    gl_Position = vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Decal_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Decal.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) out vec4 Buffer1;
        ///#ifndef _MICRO_GBUFFER_
        ///layout (location = 1) out vec4 Buffer2;
        ///#endif
        ///
        ///in vec2 OutTexCoord;
        ///in vec2 OutTrueTexCoord;
        ///uniform vec2 TexCoordScale;
        ///uniform sampler2D DecalTexture;
        ///uniform sampler2D DecalDepthTexture;
        ///
        ///
        ///float[8] MicroGBufferDecoding(sampler2D MicroGBuffer, ivec2 ScreenLocation);
        ///vec3 Normal2DTo3D(vec2 Normal);
        ///
        ///
        ///void main()
        ///{
        ///	float depth = texture(DecalDepthTexture, OutTexCoord).r;
        ///	if (depth [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_DecalPost_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/DecalPost.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec2 TexCoord;
        ///
        ///uniform vec2 TexCoordScale;
        ///out vec2 OutTexCoord;
        ///
        ///void main()
        ///{
        ///    
        ///    OutTexCoord = TexCoord * TexCoordScale;
        ///    gl_Position = vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_DecalPost_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/DecalPost.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///out vec4 glColor;
        ///
        ///
        ///in vec2 OutTexCoord;
        ///in vec2 OutTrueTexCoord;
        ///uniform sampler2D ColorTexture;
        ///uniform sampler2D CustomBuffer;
        ///uniform sampler2D DepthTexture;
        ///uniform sampler2D ShadowMapTexture;
        ///#ifndef _MOBILE_
        ///uniform sampler2D SSAOTexture;
        ///#endif
        ///
        ///uniform mat4 WorldToLight;
        ///uniform mat4 VPInvert;
        ///uniform vec3 LightDirection;
        ///uniform vec3 LightColor;
        ///uniform vec3 CameraLocation;
        ///uniform float AmbientStrength;
        ///uniform float LightStrength;
        ///
        /// [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Light_DirectionalLighting_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Light/DirectionalLighting.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec2 TexCoord;
        ///
        ///uniform vec2 TexCoordScale;
        ///out vec2 OutTexCoord;
        ///out vec2 OutTrueTexCoord;
        ///
        ///void main()
        ///{
        ///    
        ///    OutTexCoord = TexCoord * TexCoordScale;
        ///    OutTrueTexCoord = TexCoord;
        ///    gl_Position = vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Light_DirectionalLighting_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Light/DirectionalLighting.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///#extension GL_EXT_gpu_shader5 : enable
        ///precision highp float;
        ///out vec4 glColor;
        ///
        ///
        ///in vec2 OutTexCoord;
        ///in vec2 OutTrueTexCoord;
        ///uniform sampler2D ColorTexture;
        ///uniform sampler2D CustomBuffer;
        ///uniform sampler2D DepthTexture;
        ///uniform sampler2D ShadowMapTextures0;
        ///uniform sampler2D ShadowMapTextures1;
        ///uniform sampler2D ShadowMapTextures2;
        ///uniform sampler2D ShadowMapTextures3;
        ///uniform sampler2D ShadowMapTextures4;
        ///uniform sampler2D ShadowMapTextures5;
        ///#ifndef _MOBILE_
        ///uniform s [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Light_PointLighting_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Light/PointLighting.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec2 TexCoord;
        ///
        ///uniform vec2 TexCoordScale;
        ///out vec2 OutTexCoord;
        ///out vec2 OutTrueTexCoord;
        ///
        ///void main()
        ///{
        ///    
        ///    OutTexCoord = TexCoord * TexCoordScale;
        ///    OutTrueTexCoord = TexCoord;
        ///    gl_Position = vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Light_PointLighting_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Light/PointLighting.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///out vec4 glColor;
        ///
        ///
        ///in vec2 OutTexCoord;
        ///in vec2 OutTrueTexCoord;
        ///uniform sampler2D ColorTexture;
        ///uniform sampler2D CustomBuffer;
        ///uniform sampler2D DepthTexture;
        ///uniform sampler2D ShadowMapTexture;
        ///uniform sampler2D SSAOTexture;
        ///uniform mat4 VPInvert;
        ///uniform vec3 LightColor;
        ///uniform vec3 LightLocation;
        ///uniform vec3 CameraLocation;
        ///uniform float AmbientStrength;
        ///uniform float Constant;
        ///uniform float Linear;
        ///uniform float Quadratic;
        ///uniform float I [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Light_SpotLighting_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Light/SpotLighting.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec2 TexCoord;
        ///
        ///uniform vec2 TexCoordScale;
        ///out vec2 OutTexCoord;
        ///out vec2 OutTrueTexCoord;
        ///
        ///void main()
        ///{
        ///    
        ///    OutTexCoord = TexCoord * TexCoordScale;
        ///    OutTrueTexCoord = TexCoord;
        ///    gl_Position = vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_Light_SpotLighting_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/Light/SpotLighting.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///out vec4 glColor;
        ///
        ///in vec2 OutTexCoord;
        ///uniform sampler2D ColorTexture;
        ///
        ///void main()
        ///{
        ///    glColor = vec4(texture(ColorTexture, OutTexCoord).rgb, 1.0f);
        ///}
        /// 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_RenderToCamera_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/RenderToCamera.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec2 TexCoord;
        ///
        ///uniform vec2 TexCoordScale;
        ///out vec2 OutTexCoord;
        ///
        ///void main()
        ///{
        ///    
        ///    OutTexCoord = TexCoord * TexCoordScale;
        ///    gl_Position = vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_RenderToCamera_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/RenderToCamera.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///out float FragColor;
        ///
        ///uniform vec2 TexCoordScale;
        ///
        ///in vec2 OutTexCoord;
        ///in vec2 OutTrueTexCoord;
        ///uniform sampler2D DepthTexture;
        ///uniform sampler2D CustomBuffer;
        ///uniform sampler2D NoiseTexture;
        ///uniform mat4 ProjectionTransform;
        ///uniform mat4 InvertProjectionTransform;
        ///uniform vec3 samples[64];
        ///
        ///
        ///int samplesLen = 64;
        ///float radius = 0.5;
        ///float bias = 0.025;
        ///
        ///vec3 GetViewLocation(vec3 ScreenLocation);
        ///
        ///vec3 Normal2DTo3D(vec2 Normal)
        ///{
        ///    float z = [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_SSAO_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/SSAO.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec2 TexCoord;
        ///
        ///uniform vec2 TexCoordScale;
        ///out vec2 OutTexCoord;
        ///out vec2 OutTrueTexCoord;
        ///
        ///void main()
        ///{
        ///    
        ///    OutTexCoord = TexCoord * TexCoordScale;
        ///    OutTrueTexCoord = TexCoord;
        ///    gl_Position = vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_SSAO_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/SSAO.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///out vec3 glColor;
        ///
        ///in vec2 OutTexCoord;
        ///uniform vec2 TexCoordScale;
        ///uniform mat4 VPInvert;
        ///uniform mat4 Projection;
        ///uniform mat4 View;
        ///uniform vec3 CameraLocation;
        ///uniform sampler2D ColorTexture;
        ///uniform sampler2D NormalTexture;
        ///uniform sampler2D ReflectionTexture;
        ///uniform sampler2D DepthTexture;
        ///uniform samplerCube SkyboxTexture;
        ///uniform sampler2D BackDepthTexture;
        ///
        ///vec4 MyTexture(sampler2D Texture, vec2 Coord);
        ///vec3 GetWorldLocation(vec3 ScreenLoc [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_ssr_frag {
            get {
                return ResourceManager.GetString("/Shader/Deferred/ssr.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 1) in vec2 TexCoord;
        ///
        ///uniform vec2 TexCoordScale;
        ///out vec2 OutTexCoord;
        ///
        ///void main()
        ///{
        ///    
        ///    OutTexCoord = TexCoord * TexCoordScale;
        ///    gl_Position = vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Deferred_ssr_vert {
            get {
                return ResourceManager.GetString("/Shader/Deferred/ssr.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision highp float;
        ///
        ///uniform sampler2D Diffuse;
        ///in vec2 OutTexCoord;
        ///
        ///void main()
        ///{             
        ///    
        ///    vec4 color = texture(Diffuse, OutTexCoord).rgba;
        ///    if (color.a &lt; 0.1f)
        ///        discard;
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_DirectionLightShadow_frag {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/DirectionLightShadow.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 5) in vec2 TexCoord;
        ///
        ///uniform mat4 ModelTransform;
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///out vec2 OutTexCoord;
        ///
        ///
        ///void main()
        ///{
        ///    OutTexCoord = TexCoord;
        ///    gl_Position = ProjectionTransform * ViewTransform * ModelTransform * vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_DirectionLightShadow_vert {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/DirectionLightShadow.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///
        ///uniform sampler2D Diffuse;
        ///in vec2 OutTexCoord;
        ///
        ///void main()
        ///{             
        ///    
        ///    vec4 color = texture(Diffuse, OutTexCoord).rgba;
        ///    if (color.a &lt; 0.1f)
        ///        discard;
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_Instance_DirectionLightShadow_frag {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/Instance/DirectionLightShadow.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 5) in vec2 TexCoord;
        ///layout (location = 6) in mat4 ModelTransform;
        ///
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///out vec2 OutTexCoord;
        ///
        ///
        ///void main()
        ///{
        ///    OutTexCoord = TexCoord;
        ///    gl_Position = ProjectionTransform * ViewTransform * ModelTransform * vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_Instance_DirectionLightShadow_vert {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/Instance/DirectionLightShadow.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///#extension GL_ARB_fragment_layer_viewport : enable
        ///precision highp float;
        ///
        ///uniform sampler2D Diffuse;
        ///in vec2 OutTexCoord;
        ///
        ///void main()
        ///{             
        ///    vec4 color = texture(Diffuse, OutTexCoord).rgba;
        ///    if (color.a &lt; 0.1f)
        ///        discard;
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_Instance_PointLightShadow_frag {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/Instance/PointLightShadow.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 5) in vec2 TexCoord;
        ///layout (location = 6) in mat4 ModelTransform;
        ///
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///
        ///out vec2 OutTexCoord;
        ///
        ///
        ///
        ///void main()
        ///{
        ///    OutTexCoord = TexCoord;
        ///    gl_Position = ProjectionTransform * ViewTransform * ModelTransform * vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_Instance_PointLightShadow_PointLightShadow_vert {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/Instance/PointLightShadow\\PointLightShadow.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///
        ///uniform sampler2D Diffuse;
        ///in vec2 OutTexCoord;
        ///
        ///void main()
        ///{             
        ///    
        ///    vec4 color = texture(Diffuse, OutTexCoord).rgba;
        ///    if (color.a &lt; 0.1f)
        ///        discard;
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_Instance_PointLightShadow_SpotLightShadow_frag {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/Instance/PointLightShadow/SpotLightShadow.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 5) in vec2 TexCoord;
        ///layout (location = 6) in mat4 ModelTransform;
        ///
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///
        ///out vec2 OutTexCoord;
        ///
        ///
        ///
        ///void main()
        ///{
        ///    OutTexCoord = TexCoord;
        ///    gl_Position = ProjectionTransform * ViewTransform * ModelTransform * vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_Instance_PointLightShadow_SpotLightShadow_vert {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/Instance/PointLightShadow/SpotLightShadow.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///#extension GL_ARB_fragment_layer_viewport : enable
        ///precision highp float;
        ///
        ///uniform sampler2D Diffuse;
        ///in vec2 OutTexCoord;
        ///
        ///void main()
        ///{             
        ///    vec4 color = texture(Diffuse, OutTexCoord).rgba;
        ///    if (color.a &lt; 0.1f)
        ///        discard;
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_PointLightShadow_frag {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/PointLightShadow.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 5) in vec2 TexCoord;
        ///
        ///uniform mat4 ModelTransform;
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///out vec2 OutTexCoord;
        ///
        ///
        ///void main()
        ///{
        ///    OutTexCoord = TexCoord;
        ///    gl_Position = ProjectionTransform * ViewTransform * ModelTransform * vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_PointLightShadow_vert {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/PointLightShadow.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///
        ///uniform sampler2D Diffuse;
        ///in vec2 OutTexCoord;
        ///
        ///void main()
        ///{             
        ///    
        ///    vec4 color = texture(Diffuse, OutTexCoord).rgba;
        ///    if (color.a &lt; 0.1f)
        ///        discard;
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_SkeletalMesh_DirectionLightShadow_frag {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/SkeletalMesh/DirectionLightShadow.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 5) in vec2 TexCoord;
        ///layout (location = 6) in vec4 BoneIds;
        ///layout (location = 7) in vec4 BoneWeights;
        ///
        ///uniform mat4 ModelTransform;
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///uniform mat4 AnimTransform[100];
        ///out vec2 OutTexCoord;
        ///
        ///
        ///void main()
        ///{
        ///    mat4 AnimMatrix = AnimTransform[int(BoneIds[0])] * BoneWeights[0];
        ///    AnimMatrix += AnimTransform[int(BoneIds[1])] * BoneWei [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_SkeletalMesh_DirectionLightShadow_vert {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/SkeletalMesh/DirectionLightShadow.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///#extension GL_ARB_fragment_layer_viewport : enable
        ///precision highp float;
        ///
        ///uniform sampler2D Diffuse;
        ///in vec2 OutTexCoord;
        ///
        ///void main()
        ///{             
        ///    vec4 color = texture(Diffuse, OutTexCoord).rgba;
        ///    if (color.a &lt; 0.1f)
        ///        discard;
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_SkeletalMesh_PointLightShadow_frag {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/SkeletalMesh/PointLightShadow.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 5) in vec2 TexCoord;
        ///layout (location = 6) in vec4 BoneIds;
        ///layout (location = 7) in vec4 BoneWeights;
        ///
        ///uniform mat4 ModelTransform;
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///out vec2 OutTexCoord;
        ///uniform mat4 AnimTransform[100];
        ///
        ///
        ///void main()
        ///{
        ///    mat4 AnimMatrix = AnimTransform[int(BoneIds[0])] * BoneWeights[0];
        ///    AnimMatrix += AnimTransform[int(BoneIds[1])] * BoneWei [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_SkeletalMesh_PointLightShadow_vert {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/SkeletalMesh/PointLightShadow.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///
        ///uniform sampler2D Diffuse;
        ///in vec2 OutTexCoord;
        ///
        ///void main()
        ///{             
        ///    
        ///    vec4 color = texture(Diffuse, OutTexCoord).rgba;
        ///    if (color.a &lt; 0.1f)
        ///        discard;
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_SkeletalMesh_SpotLightShadow_frag {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/SkeletalMesh/SpotLightShadow.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 5) in vec2 TexCoord;
        ///layout (location = 6) in vec4 BoneIds;
        ///layout (location = 7) in vec4 BoneWeights;
        ///
        ///uniform mat4 ModelTransform;
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///out vec2 OutTexCoord;
        ///uniform mat4 AnimTransform[100];
        ///
        ///
        ///void main()
        ///{
        ///    mat4 AnimMatrix = AnimTransform[int(BoneIds[0])] * BoneWeights[0];
        ///    AnimMatrix += AnimTransform[int(BoneIds[1])] * BoneWei [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_SkeletalMesh_SpotLightShadow_vert {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/SkeletalMesh/SpotLightShadow.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///
        ///uniform sampler2D Diffuse;
        ///in vec2 OutTexCoord;
        ///
        ///void main()
        ///{             
        ///    
        ///    vec4 color = texture(Diffuse, OutTexCoord).rgba;
        ///    if (color.a &lt; 0.1f)
        ///        discard;
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_SpotLightShadow_frag {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/SpotLightShadow.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 Location;
        ///layout (location = 5) in vec2 TexCoord;
        ///
        ///uniform mat4 ModelTransform;
        ///uniform mat4 ViewTransform;
        ///uniform mat4 ProjectionTransform;
        ///out vec2 OutTexCoord;
        ///
        ///
        ///void main()
        ///{
        ///    OutTexCoord = TexCoord;
        ///    gl_Position = ProjectionTransform * ViewTransform * ModelTransform * vec4(Location, 1.0);
        ///    
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_ShadowMap_SpotLightShadow_vert {
            get {
                return ResourceManager.GetString("/Shader/ShadowMap/SpotLightShadow.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///out vec4 FragColor;
        ///
        ///in vec3 TexCoords;
        ///
        ///uniform samplerCube skybox;
        ///uniform sampler2D DepthTexture;
        ///uniform vec2 BufferSize;
        ///uniform vec2 ScreenSize;
        ///
        ///float GetDepth(vec2 ScreenLocation)
        ///{
        ///    vec2 OutTexCoord = vec2(ScreenLocation) / BufferSize;
        ///    vec2 OutTrueTexCoord = vec2(ScreenLocation) / ScreenSize;
        ///    return texture(DepthTexture, OutTexCoord).x;
        ///}
        ///
        ///
        ///void main()
        ///{   
        ///    // todo 
        ///    if (GetDepth(vec2(gl_FragCoord.xy + vec2(1.0f, 1.0f) [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _Shader_Skybox_frag {
            get {
                return ResourceManager.GetString("/Shader/Skybox.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///
        ///precision highp float;
        ///layout (location = 0) in vec3 aPos;
        ///
        ///out vec3 TexCoords;
        ///
        ///uniform mat4 projection;
        ///uniform mat4 view;
        ///
        ///void main()
        ///{
        ///    TexCoords = aPos;
        ///    gl_Position = projection * view * vec4(aPos, 1.0);
        ///} 的本地化字符串。
        /// </summary>
        internal static string _Shader_Skybox_vert {
            get {
                return ResourceManager.GetString("/Shader/Skybox.vert", resourceCulture);
            }
        }
    }
}
